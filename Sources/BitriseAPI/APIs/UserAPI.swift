//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class UserAPI {
    /**
     The subscription plan of the user

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userPlan(completion: @escaping ((_ data: V0UserPlanRespModel?,_ error: Error?) -> Void)) {
        userPlanWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     The subscription plan of the user
     - GET /me/plan

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "current_plan" : {
      "expires_at" : "expires_at",
      "price" : "price",
      "name" : "name",
      "id" : "id",
      "container_count" : 0
    },
    "trial_expires_at" : "trial_expires_at"
  }
}}]

     - returns: RequestBuilder<V0UserPlanRespModel> 
     */
    open class func userPlanWithRequestBuilder() -> RequestBuilder<V0UserPlanRespModel> {
        let path = "/me/plan"
        let URLString = BitriseAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<V0UserPlanRespModel>.Type = BitriseAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get your profile data

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userProfile(completion: @escaping ((_ data: V0UserProfileRespModel?,_ error: Error?) -> Void)) {
        userProfileWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your profile data
     - GET /me

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "unconfirmed_email" : "unconfirmed_email",
    "avatar_url" : "avatar_url",
    "is_chat_available" : true,
    "email" : "email",
    "slug" : "slug",
    "username" : "username"
  }
}}]

     - returns: RequestBuilder<V0UserProfileRespModel> 
     */
    open class func userProfileWithRequestBuilder() -> RequestBuilder<V0UserProfileRespModel> {
        let path = "/me"
        let URLString = BitriseAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<V0UserProfileRespModel>.Type = BitriseAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a specific user

     - parameter userSlug: (path) User slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userShow(userSlug: String, completion: @escaping ((_ data: V0UserProfileRespModel?,_ error: Error?) -> Void)) {
        userShowWithRequestBuilder(userSlug: userSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a specific user
     - GET /users/{user-slug}

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "unconfirmed_email" : "unconfirmed_email",
    "avatar_url" : "avatar_url",
    "is_chat_available" : true,
    "email" : "email",
    "slug" : "slug",
    "username" : "username"
  }
}}]
     - parameter userSlug: (path) User slug 

     - returns: RequestBuilder<V0UserProfileRespModel> 
     */
    open class func userShowWithRequestBuilder(userSlug: String) -> RequestBuilder<V0UserProfileRespModel> {
        var path = "/users/{user-slug}"
        let userSlugPreEscape = "\(userSlug)"
        let userSlugPostEscape = userSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user-slug}", with: userSlugPostEscape, options: .literal, range: nil)
        let URLString = BitriseAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<V0UserProfileRespModel>.Type = BitriseAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
